
#端口号
server.port=${server.port}
#应用上下文路径
server.servlet.context-path=${server.servlet.context-path}


# 指定环境为dev,不建议使用
#spring.profiles.active=dev






#mybatis配置
## 设置整个包下类的别名
mybatis.type-aliases-package=com.bin.liu.springboot.demo.entity
##配置mapper的扫描，找到所有的mapper.xml映射文件
mybatis.mapper-locations=classpath:com.bin.liu.springboot.demo.mapper.xml/*.xml
## 加载全局的配置文件
mybatis.config-location=classpath:mybatis/mybatis-config.xml




#驱动信息配置
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.url=jdbc:mysql://localhost:3306/bin_liu?useUnicode=true&characterEncoding=utf-8
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.jdbc.Driver


##连接池配置
##初始化时建立物理连接的个数
#spring.datasource.druid.initial-size=5
##最小连接池数量
#spring.datasource.druid.min-idle=5
##最大连接池数量 maxIdle已经不再使用
#spring.datasource.druid.max-active=30
##获取连接时最大等待时间，单位毫秒
#spring.datasource.druid.max-wait=6000
##申请连接时候检测,如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
#spring.datasource.druid.test-while-idle=true
##既作为检测的间隔时间又作为testWhileIdel执行的依据
#spring.datasource.druid.time-between-eviction-runs-millis=60000
##销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接
#spring.datasource.druid.min-evictable-idle-time-millis=30000
##用来检测连接是否有效的sql 必须是一个查询语句
##mysql中为 select 'x'
##oracle中为 select 1 from dual
#spring.datasource.druid.validation-query=select 'x'
##申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
#spring.datasource.druid.test-on-borrow=false
##归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
#spring.datasource.druid.test-on-return=false
##当数据库抛出不可恢复的异常时,抛弃该连接
##spring.datasource.druid.exception-sorter=true
##是否缓存preparedStatement,mysql5.5+建议开启
##spring.datasource.druid.pool-prepared-statements=true
##当值大于0时poolPreparedStatements会自动修改为true
#spring.datasource.druid.max-pool-prepared-statement-per-connection-size=20
#
#spring.datasource.druid.ignoreInvalidFields=false
#spring.datasource.druid.ignoreUnknownFields=true
#
##打印sql
##格式：logging.level.Mapper类的包=debug
#logging.level.com.bin.liu.springboot.demo.mapper = DEBUG
#
##配置扩展插件
#spring.datasource.druid.filters=stat,wall
##通过connectProperties属性来打开mergeSql功能；慢SQL记录
#spring.datasource.druid.connection-properties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
##合并多个DruidDataSource的监控数据
#spring.datasource.druid.use-global-data-source-stat=true
##设置访问druid监控页的账号和密码,默认没有
##spring.datasource.druid.stat-view-servlet.login-username=admin
##spring.datasource.druid.stat-view-servlet.login-password=admin

#日志

#日志级别
#在Spring Boot中默认配置了ERROR、WARN和INFO级别的日志输出到控制台。
#debug=true

#多彩输出
#NEVER：禁用ANSI-colored输出（默认项）
#DETECT：会检查终端是否支持ANSI，是的话就采用彩色输出（推荐项）
#ALWAYS：总是使用ANSI-colored格式输出，若终端不支持的时候，会有很多干扰信息，不推荐使用
spring.output.ansi.enabled=detect

#文件输出
#日志文件会在10Mb大小的时候被截断，产生新的日志文件，默认级别为：ERROR、WARN、INFO
#logging.file，设置文件，可以是绝对路径，也可以是相对路径。如：logging.file=my.log
#logging.path，设置目录，会在该目录下创建spring.log文件，并写入日志内容，如：logging.path=/var/log
#后面的会覆盖
logging.file=/Users/liubin/var/logs/springboot-demo.log
#logging.path=/Users/liubin/var/logs/springboot-demo

#控制级别
#配置格式：logging.level.*=LEVEL
#logging.level：日志级别控制前缀，*为包名或Logger名
#LEVEL：选项TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF
logging.level.*=info
##打印sql
##格式：logging.level.Mapper类的包=debug
logging.level.com.bin.liu.springboot.demo.mapper = DEBUG

#自定义日志配置
#由于日志服务一般都在ApplicationContext创建前就初始化了，它并不是必须通过Spring的配置文件控制。因此通过系统属性和传统的Spring Boot外部配置文件依然可以很好的支持日志控制和管理。
#
#根据不同的日志系统，你可以按如下规则组织配置文件名，就能被正确加载：
#
#Logback：logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy
#Log4j：log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xml
#Log4j2：log4j2-spring.xml, log4j2.xml
#JDK (Java Util Logging)：logging.properties



#swagger
swagger.enabled=${swagger.enabled}


##redis配置
##Redis数据库索引（默认为0）
#spring.redis.database=${spring.redis.database}
##Redis服务器地址
#spring.redis.host=${spring.redis.host}
## Redis服务器连接端口
#spring.redis.port=${spring.redis.port}
## Redis服务器连接密码
#spring.redis.password=${spring.redis.password}
## 连接池最大连接数（使用负值表示没有限制）
#spring.redis.jedis.pool.max-active=${spring.redis.pool.max-active}
##连接池最大阻塞等待时间（使用负值表示没有限制）
#spring.redis.jedis.pool.max-wait=${spring.redis.pool.max-wait}
##连接池中的最大空闲连接
#spring.redis.jedis.pool.max-idle=${spring.redis.pool.max-idle}
##连接池中的最小空闲连接
#spring.redis.jedis.pool.min-idle=${spring.redis.pool.min-idle}
##连接超时时间（毫秒）
#spring.redis.timeout=${spring.redis.timeout}




















